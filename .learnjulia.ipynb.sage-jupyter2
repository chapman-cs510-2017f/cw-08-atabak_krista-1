{"type":"settings","kernel":"julia","backend_state":"running","trust":true,"kernel_state":"busy"}
{"type":"file","last_load":1508298434645}
{"type":"cell","id":"0d0228","pos":0,"input":"## Learn Julia :\n#### Krista & Atabak","cell_type":"markdown"}
{"input":"#Comments use the pound sign\n#= multiple line comments\n    use '#=' at the beginning and\n    '=#' at the end\n=#\nx = 1 #Assignment uses the equal sign. Variables are not declared before assignment\nmyStr = \"Hello World!\" #Strings use double quotes\nmyChar = '2' #characters use single quotes\nmyBool = true\nprintln(\"$x $myStr $myChar $myBool\") #println() includes newline character after output\nprint(\"Goodbye.\")","state":"run","pos":1,"type":"cell","id":"cf66ab","kernel":"julia"}
{"output":{"0":{"name":"stdout","text":"true, false, true, true"}},"exec_count":2,"start":1508301250629,"input":"bool1 = (2 > 1)\nbool2 = true\nprint(bool1, \", $(!bool1 && bool2), $(bool1 || bool2), $(bool1 <= bool2)\")\n","state":"done","pos":2,"type":"cell","end":1508301251128,"id":"23bd15","kernel":"julia"}
{"output":{"0":{"name":"stdout","text":"x = 9.969604401089358, y = -0.42857142857142855, z = 0.42857142857142855"}},"exec_count":3,"start":1508301251130,"input":"a = 0.1\nx = a + pi^2 #for Power use ^\ny = -3/7\nz = 7\\3\nprint(\"x = $x, y = $y, z = $z\") #all are Float64","state":"done","pos":3,"type":"cell","end":1508301251173,"id":"7ed6e0","kernel":"julia"}
{"type":"cell","id":"87181e","pos":1.5,"input":"#### Data Types:\n    Number\n        Real\n            AbstractFloat\n            Integer\n                Bool\n            Irrational\n            Rational\n        Complex\n        \n    AbstractString\n        String\n        \n    Char\n    Tuple\n    \n    AbstractArray\n        DenseArray\n            Array\n            \n    Associative\n        Dict\n        \n    Base.AbstractSet\n        Set\n\n","cell_type":"markdown"}
{"type":"cell","id":"071875","pos":4,"input":"#### control structures:\n * Conditional Evaluation: if-elseif-else and ?: (ternary operator).\n * Short-Circuit Evaluation: &&, || and chained comparisons.\n * Repeated Evaluation: Loops: while and for.","cell_type":"markdown"}
{"type":"cell","id":"02f4e9","pos":5,"input":"#### differences between Python and julia:\n * Similarities:\n     * No need to define variables with a type.\n     * Syntax is intuitive and easy to read.\n * Differences:\n     * Julia is not object oriented.\n     * Julia has a multiple dispatch inferential type system -type of variable and such can be restricted, but are infered otherwise.\n     * Julia has more built-in mathematical functions and constants.\n     * Julia is like matlab.\n","cell_type":"markdown"}
{"output":{"0":{"name":"stdout","text":"1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 "},"1":{"name":"stdout","text":"5702887 "},"2":{"name":"stdout","text":"9227465 "},"3":{"name":"stdout","text":"14930352 24157817 "},"4":{"name":"stdout","text":"39088169 "},"5":{"name":"stdout","text":"63245986 "},"6":{"name":"stdout","text":"102334155 "},"7":{"name":"stdout","text":"165580141 "},"8":{"name":"stdout","text":"267914296 "},"9":{"name":"stdout","text":"433494437 "},"10":{"name":"stdout","text":"701408733 1134903170 "},"11":{"name":"stdout","text":"1836311903 "},"12":{"name":"stdout","text":"2971215073 "},"13":{"name":"stdout","text":"4807526976 7778742049 "},"14":{"name":"stdout","text":"12586269025 "},"15":{"name":"stdout","text":"20365011074 "}},"exec_count":6,"start":1508301252205,"input":"\nfunction fib(n)\n    if n == 0\n        return 0\n    elseif n == 1\n        return 1\n    else\n        return fib(n-1)+fib(n-2)\n    end\nend\nfor i = 1:100\n    print(fib(i),\" \")\nend","state":"busy","pos":6,"type":"cell","id":"c0893f","kernel":"julia"}
{"type":"cell","id":"aff345","pos":7,"input":""}
{"output":{"0":{"name":"stdout","text":"a is not greater than b"}},"exec_count":4,"start":1508301251175,"input":"a = 1\nb = 2\nif a > b\n    print(\"a is greater than b\")\nelse\n    print(\"a is not greater than b\")\nend","state":"done","pos":4.5,"type":"cell","end":1508301251657,"id":"419b9b","kernel":"julia"}
{"output":{"0":{"name":"stdout","text":"0\n"},"1":{"name":"stdout","text":"1\n2\n3\n4\n5\n6\n7\n8\n9\n"}},"exec_count":5,"start":1508301251659,"input":"n = 0\nwhile n < 10\n    println(n)\n    n += 1\nend\n","state":"done","pos":4.75,"type":"cell","end":1508301252203,"id":"14f35f","kernel":"julia"}